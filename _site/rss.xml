<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>随笔</title>
    <description>游戏，摄影，代码，旅行</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 23 Sep 2018 13:19:44 +0800</pubDate>
    <lastBuildDate>Sun, 23 Sep 2018 13:19:44 +0800</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>第一篇随笔</title>
        <description>&lt;p&gt;之前一直有想写blog，一是想记录一下工作中遇到的问题或者学习到的内容，这样查找起来会比较方便，二是想分享平时玩到好的游戏，看到好的影视作品，三是想锻炼一下我这弱鸡般的表达能力。但是无奈种种原因（其实就是懒！），最后也就在简书写了一篇文章就搁置了起来。&lt;/p&gt;

&lt;p&gt;不过最近这段时间，工作不算很忙，但是遇到的问题还是比较多的，所以就想写blog，但是又想做一些稍微不同的事情，所以就找到了目前的解决方案。&lt;/p&gt;

&lt;h2 id=&quot;在此必须先感谢开源社区没有大牛的开源项目无法在如此少的时间内搭建一个看上去如此炫酷的blog&quot;&gt;在此必须先感谢开源社区，没有大牛的开源项目，无法在如此少的时间内搭建一个看上去如此炫酷的blog。&lt;/h2&gt;

&lt;p&gt;使用的方案是 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub pages&lt;/a&gt; + &lt;a href=&quot;https://www.jekyll.com.cn/&quot;&gt;jekyll&lt;/a&gt; + &lt;a href=&quot;https://github.com/kaeyleo/jekyll-theme-H2O&quot;&gt;h2o&lt;/a&gt;（theme）&lt;/p&gt;

&lt;p&gt;部署之后就可以开始写blog，第一周的文章还没有想好内容，可能会写一些iOS基础文章(没错，我还是个iOS开发菜鸟)，所以我需要记录遇到的问题，尽快进步吧。&lt;/p&gt;

&lt;h3 id=&quot;那就下次再见吧&quot;&gt;那就下次再见吧&lt;/h3&gt;
</description>
        <pubDate>Mon, 03 Sep 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/09/03/first-blog.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/09/03/first-blog.html</guid>
        
        <category>jekyll</category>
        
        <category>开发</category>
        
        
        <category>随笔</category>
        
      </item>
    
      <item>
        <title>wkwebview基础总结</title>
        <description>&lt;p&gt;最近有个webapp的项目交到我的手上，说是有些问题，比如某些iPhone无法打开视频，启动有时比较慢等问题。其实这个项目我客户端处理的只是展示一个webview，显示的内容都是前端控制的，遇到这些问题我只能从webview下手。所幸苹果公司在iOS8之后推出wkwebview可以替换现在项目使用的uiwebview。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;使用效果&quot;&gt;使用效果&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;替换了wkwebview之后，之前所说的怪问题都解决了，更好的是，内存占用比之前减少了70%左右，顺便添加了左右划动手势和进度条显示，更加方便操作。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;如何从uiwebview过渡到wkwebview&quot;&gt;如何从uiwebview过渡到wkwebview&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实基本使用方法是一样的，主要实现wkwebview几个delegate&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WKNavigationDelegate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WKNavigationDelegate主要负责跳转、加载处理等操作。&lt;/p&gt;

&lt;p&gt;需要实现的方法为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler;

- (void)webView:(WKWebView *)webView decidePolicyForNavigationResponse:(WKNavigationResponse *)navigationResponse decisionHandler:(void (^)(WKNavigationResponsePolicy))decisionHandler;

- (void)webView:(WKWebView *)webView didStartProvisionalNavigation:(null_unspecified WKNavigation *)navigation;


- (void)webView:(WKWebView *)webView didReceiveServerRedirectForProvisionalNavigation:(null_unspecified WKNavigation *)navigation;


- (void)webView:(WKWebView *)webView didFailProvisionalNavigation:(null_unspecified WKNavigation *)navigation withError:(NSError *)error;


- (void)webView:(WKWebView *)webView didCommitNavigation:(null_unspecified WKNavigation *)navigation;


- (void)webView:(WKWebView *)webView didFinishNavigation:(null_unspecified WKNavigation *)navigation;


- (void)webView:(WKWebView *)webView didFailNavigation:(null_unspecified WKNavigation *)navigation withError:(NSError *)error;


- (void)webView:(WKWebView *)webView didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential * _Nullable credential))completionHandler;


- (void)webViewWebContentProcessDidTerminate:(WKWebView *)webView API_AVAILABLE(macosx(10.11), ios(9.0));

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中比较重要的是decidePolicyForNavigationResponse这个方法，这个方法会在wkwebview收到网页响应之后调用，在这个方法可以处理是否对此网页进行跳转。
公司项目中遇到的大部分问题都可以在这个回调中进行处理，大致方法为：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;navigationAction.request.URL.absoluteString&lt;/code&gt;通过这个方法可以获取到需要拦截的url，如果需要进行拦截就调用&lt;code class=&quot;highlighter-rouge&quot;&gt;decisionHandler(WKNavigationActionPolicyCancel);&lt;/code&gt;,如果无需处理就调用&lt;code class=&quot;highlighter-rouge&quot;&gt;decisionHandler(WKNavigationActionPolicyAllow);&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WKUIDelegate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WKUIDelegate主要是处理js回调的确认框，警告框等。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#pragma mark -WKUIDelegate
- (WKWebView *)webView:(WKWebView *)webView createWebViewWithConfiguration:(WKWebViewConfiguration *)configuration forNavigationAction:(WKNavigationAction *)navigationAction windowFeatures:(WKWindowFeatures *)windowFeatures
{
    //创建一个新的webView-createWebViewWithConfiguration
    return [[WKWebView alloc] init];
}

// 输入框
- (void)webView:(WKWebView *)webView runJavaScriptTextInputPanelWithPrompt:(NSString *)prompt defaultText:(nullable NSString *)defaultText initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(NSString * __nullable result))completionHandler
{
    completionHandler(YES);

}
// 确认框
- (void)webView:(WKWebView *)webView runJavaScriptConfirmPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(BOOL result))completionHandler
{
    completionHandler(YES);

}
// 警告框
- (void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(void))completionHandler
{
    completionHandler();
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;公司项目没有使用到这个回调的方法， 所以具体使用方法不是十分了解，具体使用方法可以去&lt;a href=&quot;https://developer.apple.com/documentation/webkit/wkuidelegate?language=objc&quot;&gt;苹果官方文档&lt;/a&gt;进行查询。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WKScriptMessageHandler&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WKScriptMessageHandler是处理OC和js交互逻辑。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OC–&amp;gt;js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OC调用js的方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[webView evaluateJavaScript:@&quot;XXXX&quot; completionHandler:^(id _Nullable result, NSError * _Nullable error) {
        NSLog(@&quot;%@&quot;,result);
    }];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中XXXX就是js方法名，completionHandler会回调的block。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;js–&amp;gt;OC&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;js调用OC的方法：&lt;/p&gt;

&lt;p&gt;1)首先js和OC要先定义一个handler名，在wkwebview初始化的时候设置，js通过这个名字来发送消息，OC也通过这个名字来判断回调过来是哪一个方法。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_scriptHandlerName = @&quot;XXXX&quot;;
       WKWebViewConfiguration *config = [[WKWebViewConfiguration alloc]init];
       WKUserContentController *userContentController = [[WKUserContentController alloc] init];

       [userContentController addScriptMessageHandler:self name:_scriptHandlerName];
       config.userContentController = userContentController;
       CGFloat mainWidth = [UIScreen mainScreen].bounds.size.width;
       CGFloat mainHeight = [UIScreen mainScreen].bounds.size.height;
       CGRect statusRect = [[UIApplication sharedApplication] statusBarFrame];
       _webView = [[WKWebView alloc] initWithFrame:CGRectMake(0, statusRect.size.height-1, mainWidth, mainHeight-statusRect.size.height) configuration:config];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里是简单初始化wkwebview的方法，XXXX就是handler名，需要将这个handler名告诉给前端开发。&lt;/p&gt;

&lt;p&gt;2）前端js调用方法为：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;window.webkit.messageHandlers.XXXX.postMessage(xx);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;XXXX也就是上述说的handler名，postMessage携带的变量就是js需要回调给OC的内容。&lt;/p&gt;

&lt;p&gt;3）OC处理回调&lt;/p&gt;

&lt;p&gt;OC需要先实现delegate的方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message {
    //收到js回调
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;message.body 就是js回调回来的内容。拿到内调内容就可以进行处理啦。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;遇到的问题&quot;&gt;遇到的问题&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;1.在调用支付宝和微信的时候发现wkwebview无法拉起微信或者支付宝app。之前的uiwebview通过alipay://或者weixin://可以直接打开客户端，但是kwwebview似乎只是单纯的加载这个url（原因不明），所以需要手动去加载。&lt;/p&gt;
&lt;h3 id=&quot;解决方法&quot;&gt;解决方法&lt;/h3&gt;
&lt;p&gt;在decidePolicyForNavigationResponse 回调中 拦截url，比如拦截alipay://开头的url就使用&lt;code class=&quot;highlighter-rouge&quot;&gt;[UIApplication sharedApplication] openurl&lt;/code&gt;方法打开这个url，这样就可以解决问题了。&lt;/p&gt;

&lt;p&gt;2.测试发现，使用h5支付宝支付完成之后返回项目页面，再点返回（或者手势右划）又会返回支付宝完成界面，再右划会返回输密码的界面，体验上有问题。&lt;/p&gt;
&lt;h3 id=&quot;解决方法-1&quot;&gt;解决方法&lt;/h3&gt;
&lt;p&gt;其实思路和上面的一样，也是拦截url，当界面是支付宝完成的url时（非支付时自动跳转），就直接返回&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;decisionHandler(WKNavigationActionPolicyCancel);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;就可以解决问题。&lt;/p&gt;

&lt;p&gt;3.js在发消息给oc的时候报错，undefined type error&lt;/p&gt;
&lt;h3 id=&quot;解决方法-2&quot;&gt;解决方法&lt;/h3&gt;
&lt;p&gt;问前端说什么都没改，但是第二天自动就好了，原因不明。&lt;/p&gt;

&lt;p&gt;4.在调试的时候遇到过白屏，比较严重，特别是从微信支付回调回项目中，三次基本上就会出现白屏，而且无论做什么操作（比如手势返回到上个界面），也会出现白屏。&lt;/p&gt;
&lt;h3 id=&quot;解决方法-3&quot;&gt;解决方法&lt;/h3&gt;
&lt;p&gt;这个问题在第二天就没有再出现了，原因也不明。我怀疑是本地缓存的问题，所以我找了一些清除缓存的方法，但是这个现象没有再出现，所以解决方法需要等待验证。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//基于ios9，开发过程中遇到过微信返回游戏有概率出现白屏，无日志，没有走到任何回调，原因不明，此方法能否解决问题不明，需待测试
-(void) cleanCache {
    // 清除所有
    //NSSet *websiteDataTypes = [WKWebsiteDataStore allWebsiteDataTypes];
    NSSet *websiteDataTypes= [NSSet setWithArray:@[

            WKWebsiteDataTypeDiskCache,

            WKWebsiteDataTypeOfflineWebApplicationCache,

            WKWebsiteDataTypeMemoryCache,

            WKWebsiteDataTypeLocalStorage,

            //WKWebsiteDataTypeCookies,

            //WKWebsiteDataTypeSessionStorage,

            //WKWebsiteDataTypeIndexedDBDatabases,

            //WKWebsiteDataTypeWebSQLDatabases

    ]];

    //// Date from

    NSDate *dateFrom = [NSDate dateWithTimeIntervalSince1970:0];

    //// Execute

    [[WKWebsiteDataStore defaultDataStore] removeDataOfTypes:websiteDataTypes modifiedSince:dateFrom completionHandler:^{

        // Done
        NSLog(@&quot;清楚缓存完毕&quot;);

    }];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 18 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/18/wkwebview-blog.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/18/wkwebview-blog.html</guid>
        
        <category>iOS开发</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>H2O theme for Jekyll</title>
        <description>&lt;p&gt;正如我在&lt;a href=&quot;http://weibo.com/1374146504/profile?topnav=1&amp;amp;wvr=6&quot;&gt;微博&lt;/a&gt;上所说的，使用&lt;a href=&quot;http://jekyll.com.cn/&quot;&gt;Jekyll&lt;/a&gt;半年以来一直没有令我满意的主题模板，所以开始计划自己写一套好看又好用的主题模板。设计之初就明确了极简主义，风格采用扁平化了，通过卡片式设计来进行区块分明的布局，参考了Medium的ui样式和知乎专栏的视觉风格。&lt;/p&gt;

&lt;h2 id=&quot;h2o&quot;&gt;H2O&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kaeyleo/jekyll-theme-H2O&quot;&gt;源码及使用文档 →&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://on2171g4d.bkt.clouddn.com/jekyll-theme-h2o-realhome.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;新主题名叫”H2O”，基于Jekyll 3.0.x（使用&lt;code class=&quot;highlighter-rouge&quot;&gt;gem update jekyll&lt;/code&gt;升级Jekyll），Markdown的代码高亮不再支持pygments转而使用rouge，咱已经默认配置了 &lt;code class=&quot;highlighter-rouge&quot;&gt;highlighter: rouge&lt;/code&gt; 。用到的技术栈也很简单：引入jQuery类库，使用Sass编写样式，使用Gulp来编译Sass、合并压缩css、js，开源在&lt;a href=&quot;https://github.com/kaeyleo/jekyll-theme-H2O&quot;&gt;Github&lt;/a&gt;上，稍作配置即可用于你的Jekyll博客上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://on2171g4d.bkt.clouddn.com/jekyll-theme-h2o-sketchdesign.png&quot; alt=&quot;Design with Sketch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用Sketch完成H2O主题的原型设计&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://on2171g4d.bkt.clouddn.com/jekyll-theme-vs.jpg&quot; alt=&quot;My Jekyll themes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;比之前漂亮不少吧，下面聊聊H2O的新特性。&lt;/p&gt;

&lt;h2 id=&quot;新特性&quot;&gt;新特性&lt;/h2&gt;

&lt;h3 id=&quot;主题配色&quot;&gt;主题配色&lt;/h3&gt;

&lt;p&gt;支持两种主题配色——蓝色和粉色。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kaeyleo/jekyll-theme-H2O/blob/master/screenshot/jekyll-theme-h2o-themecolor.jpg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;侧边栏&quot;&gt;侧边栏&lt;/h3&gt;

&lt;p&gt;相比自己上一个版本的博客主题，首页增加了侧边栏，方便展示博主的个人信息和文章标签。&lt;/p&gt;

&lt;h3 id=&quot;社交图标&quot;&gt;社交图标&lt;/h3&gt;

&lt;p&gt;使用阿里的图标管理平台&lt;a href=&quot;http://iconfont.cn/&quot;&gt;Iconfont&lt;/a&gt;整理了一套&lt;strike&gt;墙内外&lt;/strike&gt;常用的社交图标，包括微博、知乎、掘金、简书、Github等十多个网站，鼠标悬停会显示该站的主题色。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://on2171g4d.bkt.clouddn.com/jekyll-theme-h2o-snstext.jpg&quot; alt=&quot;social iconfont&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;前后文导航&quot;&gt;前后文导航&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://on2171g4d.bkt.clouddn.com/jekyll-theme-h2o-nextpostnav.png&quot; alt=&quot;Next post navigator&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;自定义文章封面&quot;&gt;自定义文章封面&lt;/h3&gt;

&lt;p&gt;在Markdown的&lt;a href=&quot;http://jekyll.com.cn/docs/frontmatter/&quot;&gt;文章头信息&lt;/a&gt;里添加cover参数来配置文章的封面图片，如果没有配置封面，则默认【主题色+底纹】的组合作为文章封面。值得一提的是，H2O有两种（粉、蓝）主题色和六种底纹（电路板、食物、云海、钻石等等）供你选择。&lt;/p&gt;

&lt;h3 id=&quot;头图个性化底纹&quot;&gt;头图个性化底纹&lt;/h3&gt;

&lt;p&gt;在没有图片的情况下单纯显示颜色会不会太无趣了点？于是想到了加入底纹元素，底纹素材是SVG格式的（保存在css样式里），加载比图片快很多。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://on2171g4d.bkt.clouddn.com/jekyll-theme-h2o-headerpatterns.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;代码高亮&quot;&gt;代码高亮&lt;/h3&gt;

&lt;p&gt;模板引入了&lt;a href=&quot;http://prismjs.com&quot;&gt;Prism.js&lt;/a&gt;，一款轻量、可扩展的代码语法高亮库。&lt;/p&gt;

&lt;p&gt;很多知名网站如&lt;a href=&quot;https://developer.mozilla.org/&quot;&gt;MDN&lt;/a&gt;、&lt;a href=&quot;https://css-tricks.com/&quot;&gt;css-tricks&lt;/a&gt;也在用它，JavaScript 之父 &lt;a href=&quot;https://brendaneich.com/&quot;&gt;Brendan Eich&lt;/a&gt; 也在个人博客上使用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://on2171g4d.bkt.clouddn.com/jekyll-theme-h2o-highlight.png&quot; alt=&quot;代码高亮&quot; /&gt;&lt;/p&gt;

&lt;p&gt;遵循 &lt;a href=&quot;https://www.w3.org/TR/html5/grouping-content.html#the-pre-element&quot;&gt;HTML5&lt;/a&gt; 标准，Prism 使用语义化的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 元素和 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;code&amp;gt;&lt;/code&gt; 元素来标记代码区块：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code class=&quot;language-css&quot;&amp;gt;p { color: red }&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在Markdown中你可以这样写：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ```css
	p { color: red }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;支持语言：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTML&lt;/li&gt;
  &lt;li&gt;CSS&lt;/li&gt;
  &lt;li&gt;Sass&lt;/li&gt;
  &lt;li&gt;JavaScript&lt;/li&gt;
  &lt;li&gt;CoffeeScript&lt;/li&gt;
  &lt;li&gt;Java&lt;/li&gt;
  &lt;li&gt;C-like&lt;/li&gt;
  &lt;li&gt;Swift&lt;/li&gt;
  &lt;li&gt;PHP&lt;/li&gt;
  &lt;li&gt;Go&lt;/li&gt;
  &lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;第三方评论&quot;&gt;第三方评论&lt;/h3&gt;

&lt;p&gt;由于多说关闭，又对国内其他第三方评论插件无感，所以将&lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt;列为首选（目前模板也只提供了这个），请自备梯子。&lt;/p&gt;

&lt;h3 id=&quot;移动端优化&quot;&gt;移动端优化&lt;/h3&gt;

&lt;p&gt;响应式设计，对手机和平板等移动设备做了优化。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://on2171g4d.bkt.clouddn.com/jekyll-theme-h2o-realm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;关于阅读体验&quot;&gt;关于阅读体验&lt;/h3&gt;

&lt;p&gt;我认为在内容质量相同的情况下，出色的沉浸式阅读体验是博客的核心。&lt;/p&gt;

&lt;p&gt;H2O在这方面还有很多需要完善的地方，比如：&lt;strike&gt;代码高亮&lt;/strike&gt;、夜间模式、查看大图…&lt;/p&gt;

&lt;h3 id=&quot;其他特性&quot;&gt;其他特性：&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;网页标题SEO优化&lt;/li&gt;
  &lt;li&gt;标签索引，点击标签跳转到标签目录，即可查看对应的全部文章&lt;/li&gt;
  &lt;li&gt;漂亮&lt;/li&gt;
  &lt;li&gt;好看&lt;/li&gt;
  &lt;li&gt;美&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;本想趁这次机会将整站https化的，但折腾了半天发现弹性web托管并不支持，所以暂时搁置https的想法。另外，博客统计工具一直使用的是&lt;a href=&quot;https://tongji.baidu.com&quot;&gt;百度统计&lt;/a&gt;，这次新增了Google Analytics。&lt;/p&gt;

&lt;p&gt;这次从0到1，独自设计、开发再到发布大约用了一周时间，也算完成一个小小的开源项目了，后续也将持续完善和更新，欢迎&lt;a href=&quot;https://github.com/kaeyleo/jekyll-theme-H2O&quot;&gt;Star&lt;/a&gt;。&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/18/new-theme-h2o.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/18/new-theme-h2o.html</guid>
        
        <category>jekyll</category>
        
        <category>开发</category>
        
        
        <category>技术</category>
        
      </item>
    
  </channel>
</rss>
